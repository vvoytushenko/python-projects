type: edu
files:
- name: university.py
  visible: true
  text: |-
    # write your code here

    #1. Take three inputs as integer numbers. They are the exam results.
    #2. Calculate the mean score of all three numbers. If the mean is a fractional number, don't discard the fractional part.
    #3. Print the resulting number.
    #4. Print the Congratulations, you are accepted! line.
    #scores = [int(input()) for i in range(3)]
    #print(sum(scores) / len(scores))
    #print('Congratulations, you are accepted!')



    #1. Read the numbers and output the mean score, as in the previous stage.
    #2. If the mean score is equal to or greater than 60.0, output the following message:
        # Congratulations, you are accepted!
    #3. If the mean score is less than 60.0, output the following message:
        # We regret to inform you that we will not be able to offer you admission.
    #scores = [int(input()) for i in range(3)]
    #if sum(scores) / len(scores) >= 60:
        #print(sum(scores) / len(scores))
        #print('Congratulations, you are accepted!')
    #else:
        #print(sum(scores) / len(scores))
        #print('We regret to inform you that we will not be able to offer you admission.')



    # 1. Read the first input, an N integer representing the total number of applicants.
    # 2. Read the second input, an M integer representing the number of applicants that should be accepted to the university.
    # 3. Read N lines from the input. Each line contains the first name, the last name, and the applicant's GPA.
        # These values are separated by one whitespace character. A GPA is a floating-point number with two decimals.
    # 4. Output the Successful applicants: message.
    # 5. Output M lines for applicants with the top-ranking GPAs.
        # Each line should contain the first and the last name of the applicant separated by a whitespace character.
        # Successful applicants' names should be printed in descending order depending on the GPA —
        # first, the applicant with the best GPA,
        # then the second-best, and so on.
    # 6. If two applicants have the same GPA, rank them in alphabetical order using their full names
    # (we know it's not really fair to choose students by their names, but what choice do we have?)
    '''
    N = int(input())
    M = int(input())
    applicants = [input().split() for _ in range(N)]
    for applicant in applicants:
        applicant[2] = float(applicant[2])
    applicants.sort(key=lambda x: (-x[2], x[0], x[1]))
    print('Successful applicants:')
    for i in range(M):
        print(applicants[i][0], applicants[i][1])
    '''





    # 1. Read an N integer from the input. This integer represents the maximum number of students for each department.
    # 2. Read the file named applicants.txt (this file is already included in the project's files,
    # even though it is not visible; so you only need to download it if you want to take a closer look at it).
    # Each line equals one applicant,
    # their first name,
    # last name, GPA,
    # first priority department,
    # second priority department,
    # and third priority department.
    # Columns with values are separated by whitespace characters.
    # For example, Laura Spungen 3.71 Physics Engineering Mathematics.
    # 3. Sort applicants according to their GPA and priorities (and names, if their GPA scores are the same).
    # As in the previous stage, if two applicants to the same department have the same GPA, sort them by their full names in alphabetical order.
    # 4. For each department, choose the N best candidates.
    # Some departments are less popular than others, so there may be fewer available candidates for a department.
    # However, their number shouldn't be more than N.
    # 5. Print the departments in the alphabetic order (Biotech, Chemistry, Engineering, Mathematics, Physics),
    # output the names and the GPA of enrolled applicants for each department.
    # Separate the name and the GPA with a whitespace character.
    # Here's an example (you may add empty lines between the departments' lists to increase the text readability):


    # num of students
    N = int(input())

    # create dicts
    applicants = []
    subjects = {
        'Biotech': [],
        'Chemistry': [],
        'Engineering': [],
        'Mathematics': [],
        'Physics': []
    }

    file = open('applicants.txt', 'r')
    while True:
        line = file.readline()
        if not line:
            break
        str = line.strip().split(' ')
        applicants.append((str[0] + ' ' + str[1], str[2], [str[3], str[4], str[5]]))

    # sort students
    temp = sorted(applicants, key=lambda pga: pga[0])
    new = sorted(temp, key=lambda pga: pga[1], reverse=True)
    rolled = []
    for i in range(3):
        for student in new:
            if student[2][i] == ' ':
                continue
            elif len(subjects[student[2][i]]) < N:
                subjects[student[2][i]].append([student[0], student[1]])
                student[2][0] = ' '
                student[2][1] = ' '
                student[2][2] = ' '
    for item in subjects:
        x = sorted(subjects[item], key=lambda x: x[1], reverse=True)
        # print(x)
        print(item, len(subjects[item]))
        for student in x:
            print(f'{student[0]} {student[1]}')
        print('')

    file.close()
  learner_created: false
- name: test/__init__.py
  visible: false
  learner_created: false
- name: test/application_list.py
  visible: false
  text: |-
    application_list = """Jermine Brunton 84 81 73 92 Physics Engineering Mathematics
    Justo Mirfin 71 77 61 60 Engineering Biotech Chemistry
    Uzma Naysmythe 60 94 75 71 Chemistry Engineering Mathematics
    Koury Wingo 71 81 81 83 Engineering Biotech Mathematics
    Kentrell Hillhouse 40 69 42 58 Mathematics Engineering Biotech
    Trica Macalpine 75 80 96 88 Engineering Mathematics Biotech
    Sang Muldoon 84 92 80 60 Physics Mathematics Engineering
    Laney Braithwaite 90 90 90 72 Physics Chemistry Mathematics
    Spring Burridge 71 84 98 71 Mathematics Chemistry Engineering
    Delta Fanny 84 85 83 86 Chemistry Physics Mathematics
    Elen Ashbury 54 76 88 62 Mathematics Chemistry Biotech
    Ruthanne Scaife 75 73 84 97 Engineering Biotech Mathematics
    Jaemi Hallets 81 71 73 86 Physics Engineering Mathematics
    Artavious Fay 71 77 61 60 Engineering Biotech Chemistry
    Franki Dinnis 60 94 75 71 Chemistry Biotech Mathematics
    Marlynn Favell 71 81 81 93 Engineering Biotech Mathematics
    Sameera Procter-Baines 70 59 72 68 Mathematics Engineering Biotech
    Shantale Tompkins 75 80 96 88 Engineering Mathematics Biotech
    Cornellius Turney 84 92 80 60 Physics Mathematics Engineering
    Blia Sagar 90 81 80 72 Physics Chemistry Biotech
    Wynn Crampton 71 84 98 71 Mathematics Chemistry Engineering
    Linda Risley 85 85 83 86 Chemistry Physics Mathematics
    Divina Butterworth 54 76 88 62 Mathematics Chemistry Biotech
    Meshell Otway-Ruthven 75 73 84 97 Engineering Biotech Mathematics
    Ammon Janssen 84 81 73 92 Physics Engineering Mathematics
    Maila Greg 71 77 61 60 Mathematics Biotech Chemistry
    Madiha Milligan 60 94 79 71 Physics Engineering Chemistry
    Humphrey Spakeman 71 81 81 83 Chemistry Biotech Mathematics
    Marygrace Wheelton 60 77 42 55 Mathematics Engineering Biotech
    Takyra Sieminski 74 80 96 92 Engineering Mathematics Physics
    Jathan Birley 84 92 80 60 Physics Mathematics Engineering
    Tawnia Alcock 81 80 90 72 Biotech Chemistry Physics
    Quinisha Clarkson 71 84 98 71 Mathematics Chemistry Engineering
    Dashanna Herron 80 85 73 86 Physics Chemistry Mathematics
    Verlon Mcconnell 84 61 88 62 Mathematics Chemistry Biotech
    Tawsha Rodgers 78 71 84 97 Engineering Biotech Mathematics
    Derick Whatley 81 91 73 80 Physics Engineering Mathematics
    Tisheena Mckenney 76 57 61 90 Engineering Physics Biotech
    Kyona Catrol 60 94 75 77 Chemistry Biotech Mathematics
    Jamarl Delap 92 81 85 93 Engineering Biotech Mathematics
    Tulio Carloss 66 59 82 64 Mathematics Engineering Physics
    Kaylie Lanthis 75 80 96 88 Engineering Mathematics Biotech
    Martha Hatchard 84 92 80 60 Physics Mathematics Engineering
    Genee Mccrae 90 81 80 72 Biotech Chemistry Physics
    Luna Pheobe 71 84 98 71 Chemistry Mathematics Engineering
    Savvas Hjellstrom 55 85 41 66 Chemistry Biotech Mathematics
    Mehul Bull 94 76 88 61 Mathematics Physics Biotech
    Kennedy Barrett 77 93 84 87 Chemistry Biotech Mathematics
    Marquita Mcrae 84 81 73 92 Physics Engineering Biotech
    Natha Keefe 71 67 53 60 Engineering Biotech Chemistry
    Crescentia Dow 86 94 85 51 Chemistry Physics Mathematics
    Randon Bradhust 72 88 85 83 Biotech Engineering Chemistry
    Dashawn Bosley 80 79 82 61 Mathematics Chemistry Biotech
    Nicolasa Sumpter 75 82 96 81 Engineering Mathematics Biotech
    Cressie Gillespie 85 92 82 70 Physics Mathematics Engineering
    Tawny Crockett 71 90 80 72 Chemistry Biotech Physics
    Kennon Inverarity 71 84 98 71 Mathematics Engineering Chemistry
    Halima Brydone 77 85 82 86 Chemistry Physics Mathematics
    Esther Bratby 55 76 88 62 Mathematics Chemistry Biotech
    Lorry Bunger 75 73 84 97 Engineering Biotech Physics
    Fatemah Desavigny 81 71 73 86 Physics Mathematics Engineering
    Marti Mclaws 71 71 61 60 Engineering Chemistry Biotech
    Estephanie Phelps 80 95 45 71 Chemistry Physics Mathematics
    Tommi Peerless 72 81 81 92 Engineering Physics Mathematics
    Cynthia Hermitton 70 59 62 88 Engineering Biotech Chemistry
    Cheyla Hankinson 75 80 86 88 Engineering Mathematics Biotech
    Giovanna Keel 84 71 76 80 Physics Mathematics Engineering
    Narissa Worthington 52 71 80 73 Biotech Chemistry Mathematics
    Aundria Guthrie 61 81 94 71 Mathematics Chemistry Engineering
    Teneil Maclean 85 63 84 45 Mathematics Physics Chemistry
    Shealynn Melville 74 76 88 62 Mathematics Chemistry Physics
    Darrah Smyth 75 73 84 97 Physics Biotech Engineering
    Elroy Leyte 84 81 73 92 Engineering Physics Mathematics
    Jessye Allum 71 77 61 60 Mathematics Biotech Chemistry
    Pearl Pullins 60 94 79 71 Chemistry Engineering Mathematics
    Brittania Denny 90 84 70 61 Chemistry Physics Mathematics
    Mendy Macmillan 61 81 81 70 Biotech Engineering Mathematics
    Ramina Ogilvie 80 65 70 68 Mathematics Engineering Biotech
    Ronel Cowan 75 80 96 88 Engineering Mathematics Biotech
    Stacey Revill 84 92 84 70 Chemistry Physics Mathematics
    Mir Ashley 71 84 98 71 Mathematics Physics Chemistry
    Ayeshia Jackman 80 85 73 86 Chemistry Physics Mathematics
    Jordann Rives 84 61 88 62 Mathematics Chemistry Biotech
    Katrine Proby 78 71 84 90 Engineering Biotech Mathematics
    Jermain Stobbs 81 91 73 80 Physics Engineering Mathematics
    Sharief Macallister 76 57 61 99 Engineering Physics Biotech
    Shannette Cowie 60 94 75 77 Chemistry Biotech Mathematics
    Melena Hearn 92 81 85 93 Engineering Biotech Mathematics
    Moraima Kendell 66 59 82 64 Mathematics Engineering Physics
    Amira Giddings 75 80 96 78 Engineering Mathematics Physics
    Tyrone Fern 64 92 80 52 Physics Mathematics Engineering
    Joaquin Mytton 54 76 88 62 Mathematics Chemistry Biotech
    Ehab Cocciardi 75 73 84 97 Engineering Biotech Mathematics
    Tamkia Fish 81 71 73 86 Physics Engineering Mathematics
    Deniz Blanchard 71 77 61 60 Engineering Biotech Chemistry
    Mira Riley 60 94 75 71 Chemistry Biotech Mathematics
    Loura Macansh 71 81 81 93 Engineering Physics Mathematics
    Nastassja Trustram 60 49 82 68 Mathematics Engineering Physics"""
  learner_created: false
- name: test/tests.py
  visible: false
  text: |
    from hstest import StageTest, CheckResult, WrongAnswer, TestCase
    from .application_list import application_list as application_list

    input_1 = ["1"]
    input_2 = ["23"]
    input_3 = ["10"]
    input_4 = ["15"]


    class TestAdmissionProcedure(StageTest):
        def generate(self):
            return [
                TestCase(stdin=input_1, attach=input_1, files={'applicants.txt': application_list}),
                TestCase(stdin=input_2, attach=input_2, files={'applicants.txt': application_list}),
                TestCase(stdin=input_3, attach=input_3, files={'applicants.txt': application_list}),
                TestCase(stdin=input_4, attach=input_4, files={'applicants.txt': application_list})
            ]

        @staticmethod
        def sort_by_priority(applicants, priority_n, departments_names, departments_lists, max_students, exams):
            accepted_students = []
            for n, dep in enumerate(departments_names):
                dep_list = departments_lists[n]
                exam_n = exams[n]
                if len(dep_list) == max_students:
                    continue
                students_needed = max_students - len(dep_list)
                dep_applicants = [[applicant[0]] + [applicant[exam_n + 1]]
                                  for applicant in applicants if applicant[-1][priority_n] == dep]
                dep_applicants = sorted(dep_applicants, key=lambda x: (-x[1], x[0]))[:students_needed]
                departments_lists[n].extend(dep_applicants)
                accepted_students.extend([appl[0] for appl in dep_applicants])
            applicants = [applicant for applicant in applicants if applicant[0] not in accepted_students]
            return applicants, departments_lists

        @staticmethod
        def get_admission_lists(max_students):
            applicants = application_list.strip().split('\n')
            departments = {'Mathematics': 2, 'Physics': 0, 'Biotech': 1, 'Chemistry': 1, 'Engineering': 3}
            exams = [departments[dep] for dep in sorted(departments)]
            departments = sorted(departments)
            applicants_data = []
            for line in applicants:
                line = line.split()
                line = [line[0] + ' ' + line[1]] + [float(element) for element in line[2:-3]] + [line[-3:]]
                applicants_data.append(line)
            departments_lists = [[] for _ in departments]
            for i in range(len(applicants_data[-1][-1])):
                applicants_data, departments_lists = TestAdmissionProcedure.sort_by_priority(applicants_data, i,
                                                                                             departments,
                                                                                             departments_lists,
                                                                                             max_students,
                                                                                             exams)
            departments_lists = [[' '.join([str(el) for el in applicant])
                                  for applicant in sorted(dep, key=lambda x: (-x[1], x[0]))]
                                 for dep in departments_lists]
            return departments, departments_lists

        def check(self, reply: str, attach: list):
            n = int(attach[0])
            output = reply.strip().split('\n')
            output = [line for line in output if line.strip()]
            if not output:
                raise WrongAnswer("Your output seems to be empty.")
            department_names, admission_lists = self.get_admission_lists(n)
            correct_n_lines = len(department_names) + sum([len(dep_list) for dep_list in admission_lists])
            if len(output) != correct_n_lines:
                raise WrongAnswer("Your output is supposed to contain {0} lines with data (N={1}).\n"
                                  "However, {2} lines with data are found.".format(correct_n_lines, n, len(output)))

            for i, department_name in enumerate(department_names):
                if department_name.lower() not in output[0].lower():
                    raise WrongAnswer("The current line is supposed to contain the name of the department \"{0}\".\n"
                                      "However, this line contains the following data:\n"
                                      "\"{1}\"\n"
                                      "Make sure that you output the department names. \n"
                                      "Also, make sure that you output them "
                                      "in correct order.\n".format(department_name, output[0]))
                output = output[1:]
                correct_applicants = admission_lists[i]
                output_applicants, output = output[:len(correct_applicants)], output[len(correct_applicants):]
                for j, applicant in enumerate(correct_applicants):
                    applicant_name, applicant_surname, score = applicant.split()
                    applicant_name = "{0} {1}".format(applicant_name, applicant_surname)
                    score = int(float(score))
                    output_applicant = output_applicants[j].strip().split(' ')
                    if len(output_applicant) != 3:
                        raise WrongAnswer("Line {0} for the {1} department "
                                          "does not seem to contain three elements: first name, last name and score.\n"
                                          "Make sure you separate them "
                                          "with one whitespace character.".format(j + 1,
                                                                                  department_name))
                    output_applicant_name = "{0} {1}".format(output_applicant[0], output_applicant[1])
                    try:
                        output_score = int(float(output_applicant[-1]))
                    except ValueError:
                        raise WrongAnswer("The second element in line {0} for the {1} department\n"
                                          "does not seem to be a number: \"{2}\". \n"
                                          "Make sure you format the output "
                                          "as stated in the example.".format(j + 1,
                                                                             department_name,
                                                                             output_applicant[1]))
                    if applicant_name.lower().strip() not in output_applicant_name.lower():
                        raise WrongAnswer("The first element in line {0} for the {1} department\n"
                                          "does not seem to contain the correct name of the student ({2}).\n"
                                          "Instead, it is equal to \"{3}\"".format(j + 1, department_name,
                                                                                   applicant_name,
                                                                                   output_applicant_name))

                    if score != output_score:
                        raise WrongAnswer("The second element in line {0} for the {1} department\n"
                                          "does not seem to contain the correct score of the student ({2}).\n"
                                          "Instead, it is equal to \"{3}\"".format(j + 1, department_name,
                                                                                   score,
                                                                                   output_score))

            return CheckResult.correct()


    if __name__ == '__main__':
        TestAdmissionProcedure().run_tests()
  learner_created: false
- name: applicants.txt
  visible: false
  text: |
    Jermine Brunton 84 81 73 92 Physics Engineering Mathematics
    Justo Mirfin 71 77 61 60 Engineering Biotech Chemistry
    Uzma Naysmythe 60 94 75 71 Chemistry Engineering Mathematics
    Koury Wingo 71 81 81 83 Engineering Biotech Mathematics
    Kentrell Hillhouse 40 69 42 58 Mathematics Engineering Biotech
    Trica Macalpine 75 80 96 88 Engineering Mathematics Biotech
    Sang Muldoon 84 92 80 60 Physics Mathematics Engineering
    Laney Braithwaite 90 90 90 72 Physics Chemistry Mathematics
    Spring Burridge 71 84 98 71 Mathematics Chemistry Engineering
    Delta Fanny 84 85 83 86 Chemistry Physics Mathematics
    Elen Ashbury 54 76 88 62 Mathematics Chemistry Biotech
    Ruthanne Scaife 75 73 84 97 Engineering Biotech Mathematics
    Jaemi Hallets 81 71 73 86 Physics Engineering Mathematics
    Artavious Fay 71 77 61 60 Engineering Biotech Chemistry
    Franki Dinnis 60 94 75 71 Chemistry Biotech Mathematics
    Marlynn Favell 71 81 81 93 Engineering Biotech Mathematics
    Sameera Procter-Baines 70 59 72 68 Mathematics Engineering Biotech
    Shantale Tompkins 75 80 96 88 Engineering Mathematics Biotech
    Cornellius Turney 84 92 80 60 Physics Mathematics Engineering
    Blia Sagar 90 81 80 72 Physics Chemistry Biotech
    Wynn Crampton 71 84 98 71 Mathematics Chemistry Engineering
    Linda Risley 85 85 83 86 Chemistry Physics Mathematics
    Divina Butterworth 54 76 88 62 Mathematics Chemistry Biotech
    Meshell Otway-Ruthven 75 73 84 97 Engineering Biotech Mathematics
    Ammon Janssen 84 81 73 92 Physics Engineering Mathematics
    Maila Greg 71 77 61 60 Mathematics Biotech Chemistry
    Madiha Milligan 60 94 79 71 Physics Engineering Chemistry
    Humphrey Spakeman 71 81 81 83 Chemistry Biotech Mathematics
    Marygrace Wheelton 60 77 42 55 Mathematics Engineering Biotech
    Takyra Sieminski 74 80 96 92 Engineering Mathematics Physics
    Jathan Birley 84 92 80 60 Physics Mathematics Engineering
    Tawnia Alcock 81 80 90 72 Biotech Chemistry Physics
    Quinisha Clarkson 71 84 98 71 Mathematics Chemistry Engineering
    Dashanna Herron 80 85 73 86 Physics Chemistry Mathematics
    Verlon Mcconnell 84 61 88 62 Mathematics Chemistry Biotech
    Tawsha Rodgers 78 71 84 97 Engineering Biotech Mathematics
    Derick Whatley 81 91 73 80 Physics Engineering Mathematics
    Tisheena Mckenney 76 57 61 90 Engineering Physics Biotech
    Kyona Catrol 60 94 75 77 Chemistry Biotech Mathematics
    Jamarl Delap 92 81 85 93 Engineering Biotech Mathematics
    Tulio Carloss 66 59 82 64 Mathematics Engineering Physics
    Kaylie Lanthis 75 80 96 88 Engineering Mathematics Biotech
    Martha Hatchard 84 92 80 60 Physics Mathematics Engineering
    Genee Mccrae 90 81 80 72 Biotech Chemistry Physics
    Luna Pheobe 71 84 98 71 Chemistry Mathematics Engineering
    Savvas Hjellstrom 55 85 41 66 Chemistry Biotech Mathematics
    Mehul Bull 94 76 88 61 Mathematics Physics Biotech
    Kennedy Barrett 77 93 84 87 Chemistry Biotech Mathematics
    Marquita Mcrae 84 81 73 92 Physics Engineering Biotech
    Natha Keefe 71 67 53 60 Engineering Biotech Chemistry
    Crescentia Dow 86 94 85 51 Chemistry Physics Mathematics
    Randon Bradhust 72 88 85 83 Biotech Engineering Chemistry
    Dashawn Bosley 80 79 82 61 Mathematics Chemistry Biotech
    Nicolasa Sumpter 75 82 96 81 Engineering Mathematics Biotech
    Cressie Gillespie 85 92 82 70 Physics Mathematics Engineering
    Tawny Crockett 71 90 80 72 Chemistry Biotech Physics
    Kennon Inverarity 71 84 98 71 Mathematics Engineering Chemistry
    Halima Brydone 77 85 82 86 Chemistry Physics Mathematics
    Esther Bratby 55 76 88 62 Mathematics Chemistry Biotech
    Lorry Bunger 75 73 84 97 Engineering Biotech Physics
    Fatemah Desavigny 81 71 73 86 Physics Mathematics Engineering
    Marti Mclaws 71 71 61 60 Engineering Chemistry Biotech
    Estephanie Phelps 80 95 45 71 Chemistry Physics Mathematics
    Tommi Peerless 72 81 81 92 Engineering Physics Mathematics
    Cynthia Hermitton 70 59 62 88 Engineering Biotech Chemistry
    Cheyla Hankinson 75 80 86 88 Engineering Mathematics Biotech
    Giovanna Keel 84 71 76 80 Physics Mathematics Engineering
    Narissa Worthington 52 71 80 73 Biotech Chemistry Mathematics
    Aundria Guthrie 61 81 94 71 Mathematics Chemistry Engineering
    Teneil Maclean 85 63 84 45 Mathematics Physics Chemistry
    Shealynn Melville 74 76 88 62 Mathematics Chemistry Physics
    Darrah Smyth 75 73 84 97 Physics Biotech Engineering
    Elroy Leyte 84 81 73 92 Engineering Physics Mathematics
    Jessye Allum 71 77 61 60 Mathematics Biotech Chemistry
    Pearl Pullins 60 94 79 71 Chemistry Engineering Mathematics
    Brittania Denny 90 84 70 61 Chemistry Physics Mathematics
    Mendy Macmillan 61 81 81 70 Biotech Engineering Mathematics
    Ramina Ogilvie 80 65 70 68 Mathematics Engineering Biotech
    Ronel Cowan 75 80 96 88 Engineering Mathematics Biotech
    Stacey Revill 84 92 84 70 Chemistry Physics Mathematics
    Mir Ashley 71 84 98 71 Mathematics Physics Chemistry
    Ayeshia Jackman 80 85 73 86 Chemistry Physics Mathematics
    Jordann Rives 84 61 88 62 Mathematics Chemistry Biotech
    Katrine Proby 78 71 84 90 Engineering Biotech Mathematics
    Jermain Stobbs 81 91 73 80 Physics Engineering Mathematics
    Sharief Macallister 76 57 61 99 Engineering Physics Biotech
    Shannette Cowie 60 94 75 77 Chemistry Biotech Mathematics
    Melena Hearn 92 81 85 93 Engineering Biotech Mathematics
    Moraima Kendell 66 59 82 64 Mathematics Engineering Physics
    Amira Giddings 75 80 96 78 Engineering Mathematics Physics
    Tyrone Fern 64 92 80 52 Physics Mathematics Engineering
    Joaquin Mytton 54 76 88 62 Mathematics Chemistry Biotech
    Ehab Cocciardi 75 73 84 97 Engineering Biotech Mathematics
    Tamkia Fish 81 71 73 86 Physics Engineering Mathematics
    Deniz Blanchard 71 77 61 60 Engineering Biotech Chemistry
    Mira Riley 60 94 75 71 Chemistry Biotech Mathematics
    Loura Macansh 71 81 81 93 Engineering Physics Mathematics
    Nastassja Trustram 60 49 82 68 Mathematics Engineering Physics
  learner_created: false
- name: tests.py
  visible: false
  text: |
    from test.tests import TestAdmissionProcedure

    if __name__ == '__main__':
        TestAdmissionProcedure().run_tests()
  learner_created: false
feedback_link: https://hyperskill.org/projects/163/stages/848/implement#comment
status: Failed
feedback:
  message: |-
    Exception in test #1

    Traceback (most recent call last):
      File "university.py", line 123, in <module>
        f_cache, cache, n = [[line.rstrip()] for line in f], [], int(input())
    NameError: name 'f' is not defined
  time: "Thu, 09 Mar 2023 15:01:25 UTC"
record: 5
