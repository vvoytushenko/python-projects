type: edu
files:
- name: test/__init__.py
  visible: false
  learner_created: false
- name: test/tests.py
  visible: false
  text: |
    import re

    from math import isclose
    from hstest import CheckResult, StageTest, TestedProgram, WrongAnswer, dynamic_test


    def is_float(num: str):
        try:
            float(num)
            return True
        except ValueError:
            return False


    def check_outputs_number(values_number: int, user_output: str):
        outputs = user_output.split()

        if not all(is_float(output) for output in outputs):
            raise WrongAnswer(f"Answer '{user_output}' contains non-numeric values.")

        if len(outputs) != values_number:
            raise WrongAnswer(f"Answer contains {len(outputs)} values, but {values_number} values are expected.")


    def check_digits(user_output: str, message: str):
        """Tests if a positive-negative number has no more than 5 digits after dot"""
        pattern = r"^[-]?[0-9]+.[0-9]{1,5}$"
        for value in user_output.split():
            m = re.match(pattern, value)
            if not m:
                raise WrongAnswer(message)


    def check_num_values(values: list, user_values: list, message: str, rel_tol=1.0e-3):
        if not all(isclose(value, user_value, rel_tol=rel_tol) for value, user_value in zip(values, user_values)):
            raise WrongAnswer(message)


    class Stage1Test(StageTest):
        @dynamic_test
        def test(self):
            pr = TestedProgram()
            user_output = pr.start().strip()

            if len(user_output) == 0:
                raise WrongAnswer("Seems like your program does not show any output.")

            # check output format
            check_outputs_number(3, user_output)

            # check digits
            check_digits(user_output, "Make sure that you provide numbers with no more than 5 digits after the dot.")

            # check values
            user_values = [float(value) for value in user_output.split()]

            intercept = [-92394937.42461553]
            check_num_values(intercept, user_values[:1],
                             "The first submitted value (intercept) is wrong.\n"
                             "Make sure that you provide numbers in the correct order.",
                             rel_tol=1.0e-2)

            slope = [1322928.79254486]
            check_num_values(slope, user_values[1:2],
                             "The second submitted value (slope) is wrong.\n"
                             "Make sure that you provide numbers in the correct order.",
                             rel_tol=1.0e-2)

            mape_score = [1.2099028536302507]
            check_num_values(mape_score, user_values[2:],
                             "The third submitted value (MAPE score) is wrong.\n"
                             "Make sure that you provide numbers in the correct order.",
                             rel_tol=1.0e-2)

            return CheckResult.correct()


    if __name__ == '__main__':
        Stage1Test().run_tests()
  learner_created: false
- name: solution.py
  visible: true
  text: |
    import os
    import requests

    import pandas as pd
    from sklearn.linear_model import LinearRegression
    from sklearn.model_selection import train_test_split
    from sklearn.metrics import mean_absolute_percentage_error as mape

    # checking ../Data directory presence
    if not os.path.exists('../Data'):
        os.mkdir('../Data')

    # download data if it is unavailable
    if 'data.csv' not in os.listdir('../Data'):
        url = "https://www.dropbox.com/s/3cml50uv7zm46ly/data.csv?dl=1"
        r = requests.get(url, allow_redirects=True)
        open('../Data/data.csv', 'wb').write(r.content)

    # read data
    data = pd.read_csv('../Data/data.csv')

    # write your code here
  learner_created: false
- name: tests.py
  visible: false
  text: |-
    from test.tests import Stage1Test

    if __name__ == '__main__':
        Stage1Test().run_tests()
  learner_created: false
feedback_link: https://hyperskill.org/projects/287/stages/1495/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Sat, 25 Feb 2023 09:37:33 UTC"
record: 1
